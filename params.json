{"name":"Licensing-README","tagline":"README for Software Potential Licensing NuGet package from Software Potential","body":"Welcome to the SoftwarePotential.Licensing-&lt;MyProduct&gt;_&lt;MyVersion&gt; NuGet Package for your Product\r\n\r\nIMPORTANT: this package is intended to be used in concert with a SoftwarePotential.Protection-&lt;PermutationShortCode&gt; NuGet package, which must be installed for the code to compile correctly\r\n\r\nThe code in this README is intended to provide a terse introduction to some key concepts employed in the Licensing APIs we expose.\r\n\r\nIt is NOT intended as a full product walkthrough or as a sample of a real application. Please refer to:\r\n\r\n- https://github.com/SoftwarePotentialsamples for example code\r\n- http://support.inishtech.com for the forum and other support materials\r\n\r\nKEY NAMESPACES\r\n==============\r\n    using Sp.Agent; // Most Sp.Agent licensing APIs live in this namespace\r\n    using Slps.ProtectionAttributes; // The [Protect] attribute lives in here\r\n    using System.Linq; // Many of our APIs yield collections etc. that are intended to work well with LINQ\r\n\r\nATTRIBUTES FOR PROTECTION ONLY \r\n=====================================================================================================\r\n(Provided by accompanying SoftwarePotential.Protection NuGet Package)\r\n0. Protecting code \r\n------------------\r\n```c#\r\n// (Actually provided by the SoftwarePotential.Protection NuGet Package, but commonly used together with License Checks)\r\n[Protect] // Protect the code (but no License checks)\r\npublic static void MySensitiveMethod()\r\n{\r\n    // Code Protector will Protect the method from ILDASM/ILSpy/Reflector etc. by transforming the code\r\n    // No licensing restrictions are imposed on running this code\r\n    // (This Attribute lives in Sp.Agent.dll in the namespace Slps.ProtectionAttributes - it is included in the Sp.Agent NuGet Package but it is typically installed via by the 'Sp.Protection-<PermutationShortCode> NuGet Package )\r\n}\r\n```\r\n    \r\nATTRIBUTES FOR LICENSING AND PROTECTION\r\n=======================================\r\n\r\n1. Requiring a Valid product license to run some code\r\n-----------------------------------------------------\r\n```c#\r\n[MyProduct_1.License] // Protect the code + require a license for the product\r\npublic static void MyMethodSubjectToHoldingAnyValidLicense()\r\n{\r\n    // Entry to this method is subject to a valid license for the product being available at each execution of the method\r\n    // (as with [Protect], Code Protector will Protect the method)\r\n    // (This Attribute is generated into a SpProduct.cs file by the 'Sp.Product-<ProductName>_<ProductVersion> NuGet Package)\r\n}\r\n```\r\n\r\n2. Requiring a specific Feature from the Software Potential Product Definition to be Available\r\n----------------------------------------------------------------------------------------------\r\n```c#\r\n[MyProduct_1.Features.GlobalAnalysis]\r\npublic static void MyMethodSubjectToAvailabilityOfASpecificFeatureOnTheIssuedLicense()\r\n{\r\n    // Entry to this method is subject to the associated Product Feature being included in the Issued License\r\n    // Both the License and the Feature must be Valid at the time of execution of the method\r\n    // (as with [Protect], Code Protector will Protect the method)\r\n    // (For each Feature that has been defined for the Product on the Software Potential Service, there will be an associated attribute generated into the SpProduct.cs file by the 'Sp.Product-<ProductName>_<ProductVersion> NuGet Package)\r\n}\r\n```\r\nEXAMPLE CODE USING Sp.Agent APIs TO IMPLEMENT PROGRAMMATIC LICENSE CHECKS\r\n=========================================================================\r\n\r\n1. Querying License State\r\n-------------------------\r\n```c#\r\n// Example using Sp.Agent APIs to programmatically determine whether a Licensing Requirement can be fulfilled\r\n// The licensing check is enforced at the point where the Licensed behavior is actually triggered\r\n// Here we use the API to enable buttons/menu items and/or offer tooltips or upgrade or 'buy now' links\r\npublic ScreenDefinition GenerateMenu()\r\n{\r\n    // This single call will determine the set of currently available features this instant (including Feature Expiration checks etc.)\r\n    var features = SpAgent.Product.Features.ValidAvailable();\r\n    return new ScreenDefinition {\r\n    \tnew Title ( \"Main Menu\"),\r\n    \tnew Button ( \r\n    \t\t\"Run Report\", \r\n    \t\tOnClick = () => ShowReportViewer(GenerateReport())),\r\n    \tnew Button ( \r\n    \t\t\"Run Basic Check\", \r\n    \t\tOnClick = MySensitiveMethod),\r\n    \tnew Button ( \r\n    \t\t\"Run Detailed Analysis\", \r\n    \t\tEnabled = features.Any(),\r\n    \t\tOnClick = MyMethodSubjectToHoldingAnyValidLicense),\r\n    \tnew Button ( \r\n    \t\t\"Run Global Analysis\", \r\n    \t\tEnabled = features.Contains( MyProduct_1.Features.GlobalAnalysis.Name ),\r\n    \t\tOnClick = MyMethodSubjectToAvailabilityOfASpecificFeatureOnTheIssuedLicense),\r\n    \tnew Button ( \r\n    \t\t\"Run Global Optimization\", \r\n    \t\tEnabled = features.Contains( MyProduct_1.Features.GlobalOptimization.Name ),\r\n    \t\tOnClick = StartGlobalOptimizationProcess)\r\n    };\r\n}\r\n```\r\n\r\n2a. Using Licensing State To Guide Application Flow\r\n--------------------------------------------------\r\n```c#\r\n// Example of a case where the behavior of some logic needs to be aware of the Current Licensing state\r\n// In this example, we have elected not to [Protect] this method. This might be on the basis that\r\n// - the work we are performing is not intellectually sensitive \r\n// - the code should run at peak performance. \r\npublic ReportOutput GenerateReport()\r\n{\r\n    var result = GenerateBaseReportOutput();\r\n    if ( SpAgent.Product.Features.ValidAvailableContains( MyProduct_1.Features.GlobalAnalysis.Name ) )\r\n    {\r\n    \tvar data = LoadDataForGlobalAnalysis();\r\n    \tfor ( int i = 0; i < 10000; i++ )\r\n    \t\tdata.RunPreparationPass( i );\r\n    \t// the method RunGlobalAnalysis will typically (directly or indirectly) contain Declarative License checks (i.e., as used on MyMethodSubjectToAvailabilityOfASpecificFeatureOnTheIssuedLicense) in relevant areas\r\n    \tresult.AddAnalysis( RunGlobalAnalysis( data ) );\r\n    }\r\n    return result;\r\n}\r\n```\r\n2b. Protecting High Level Application Flow Logic\r\n------------------------------------------------\r\nNOTE: If alternately one considered the logic in GenerateReport() (above) to be sensitive, one might\r\n\r\n\r\n1. Extract the section doing the 10000 iterations as another Method\r\n2. Apply either one or the other of the following protection attributes\r\n\t\r\n\ta) **[Protect]** - if you consider the general flow logic to be sensitive (but have placed appropriate License checks / attributes within code being triggered by this controlling logic) OR\r\n\r\n\tb) **[MyProduct_1.License]** - if, in addition to (a) you also consider it critical that a Valid License is held to be able to run this controlling logic\r\n\r\n3. Provisioning/Upgrading/Warning about Expiration of Licenses etc.\r\n-------------------------------------------------------------------\r\n```c#    \r\n// Example of some basic logic using the Sp.Agent APIs to manage evaluations / purchases / upgrades of licenses for our product\r\n// One should consider running this as an asynchronous or background activity, as the first call to a licensing routine in a cold application should ideally not unnecessarily impede the users flow\r\n[Protect] // Generally one would wish to Protect code such as this, as decompilation might unnecessarily leak information as to how your Licensing strategy as a whole works\r\nvoid CoordinateLicenseUpgrades()\r\n{\r\n    //// Before this, one should have \r\n    //// a) Configured and your License storage (typically during installation) \r\n    //// b) Verified that License Storage is correctly configured\r\n    //// The details of how this is coordinated depend on the specific Store and Application Type.\r\n    //// See https://github.com/SoftwarePotential/samples for example code\r\n    var validLicenses = SpAgent.Product.Licenses.Valid();\r\n    if ( validLicenses.Any() )\r\n    {\r\n    \tvar expiringFeatures = SpAgent.Product.Features.ValidAvailableExpiringWithin( TimeSpan.FromDays( 30 ) );\r\n    \tif ( expiringFeatures.Any() )\r\n    \t\tTriggerLicensesExpiringWarningPage( expiringFeatures, validLicenses );\r\n    \telse\r\n    \t{\r\n    \t\tvar userHasLicenseIncludingAdvancedFeature = SpAgent.Product.Features.ValidAvailable().Contains( MyProduct_1.Features.GlobalAnalysis.Name );\r\n    \t\tTriggerStartupBannerWithTeaserForAdvancedModulesIfNotYetUpgraded( userHasLicenseIncludingAdvancedFeature );\r\n    \t}\r\n    }\r\n    else\r\n    \tTriggerNavigateToLicensePurchaseOrActivationScreen();\r\n}\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}